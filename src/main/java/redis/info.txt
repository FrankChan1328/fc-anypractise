参考：https://developer.aliyun.com/article/307547

1.引入jar
<dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>2.9.0</version>
</dependency>

2.RedisTool 说明【加锁】
jedis.set(String key, String value, String nxxx, String expx, int time)
参数说明
1).第一个为key，我们使用key来当锁，因为key是唯一的。

2).第二个为value，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？
原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。
requestId可以使用UUID.randomUUID().toString()方法生成。

3).第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；

4).第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。

5).第五个为time，与第四个参数相呼应，代表key的过期时间。

【注】总的来说，执行上面的set()方法就只会导致两种结果：
1). 当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。
2). 已有锁存在，不做任何操作。

3.RedisTool 说明【解锁】
1).Lua代码的功能是什么呢？其实很简单，首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）
2).为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的
3).为什么执行eval()方法可以确保原子性？源于Redis的特性,
简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。


3.Redission
如果你的项目中Redis是多机部署的，那么可以尝试使用Redisson实现分布式锁，这是Redis官方提供的Java组件