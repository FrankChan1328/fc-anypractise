1.说明
	* 简单工厂模式是类的创建模式，又叫做静态工厂方法(static factory method)模式
	* 工厂方法模式是类的创建模式，又叫做虚拟构造子模式或者多态性工厂模式，将实际创建工作推迟到子类中。
	* 抽象工厂模式是对象的创建模式，提供一个接口用于创建相关或依赖对象的家族，而不需要明确指定具体类。

2.工厂方法模式
	* 工厂方法模式是简单工厂模式的进一步抽象和推广。
		由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。
	* 首先，在工厂方法模式中，核心的工厂类不再负责所有的产品的创建，而是将具体的创建的工作交给子类去做。
		这个核心类则摇身一变，成为一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。

3.抽象工厂模式涉及角色：
	* 抽象工厂(AbstractFactory)角色：
		担任这个角色的是工厂方法模式的核心，它是与应用系统的商业逻辑无关的。
		通常使用java 接口或者抽象类实现，而所有的具体工厂类必须实现该接口或者抽象类。
	* 具体工厂类(Concrete Factory)角色：
		该角色直接在客户端的调用下创建产品的实例。
		该角色含有选择合适的产品对象的逻辑，而这个逻辑与应用系统的商业逻辑紧密相关。
		通常使用具体Java类实现这个角色。
	* 抽象产品(Abstract Product)角色：
		担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。
		通常使用接口或者抽象类实现。
	* 具体产品(Concrete Product)角色：
		抽象工厂模式所创建的任何产品都是某一个具体产品类的实例。
		这是客户端最终需要的东西，其内部一定充满了应用系统的商业逻辑。

===============================================
2020.7.21
	* 简单工厂模式是类的创建模式，又叫做静态工厂方法(static factory method)模式
	* 工厂方法模式是类的创建模式，又叫做虚拟构造子模式或者多态性工厂模式，将实际创建工作推迟到子类中。
	* 抽象工厂模式是对象的创建模式，提供一个接口用于创建相关或依赖对象的家族，而不需要明确指定具体类。